{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About As part of the CANARI project (Climate change in the Arctic \u2013 North Atlantic region and impacts on the UK) project a large ensemble of the HadGEM3 coupled climate model is being run, CANARI-LE . This page is designed to provide details of the ensemble (below), information about the data and how to access, any events (e.g. March 2024 Sprint ), highlights and frequently asked questions . Ensemble Details Need to verify/look up these details and add references Model: HadGEM3-GC1.3-MM, same configuration as used in CMIP6, global configuration version 3.1 Ocean: NEMO3.6 Atmosphere: UM Sea Ice: CICE Land: Jules 40 historical (1950-2014) ensemble members 40 future projection, SSP3-7.0 (2015-2100) ensemble members State of Ensemble Currently running historical simulations, with approximately 25 ensemble members complete and 15 running. Detailed information on the state of the ensemble can be found here . An example set of data is currently uploaded onto and priority variables are in process of being downloaded from tape to JASMIN. How to cite There is no specific paper yet on the large ensemble, so please reference the HadGEM3.1 paper and acknowledge CANARI and JASMIN. Publications Soon :)","title":"About"},{"location":"#about","text":"As part of the CANARI project (Climate change in the Arctic \u2013 North Atlantic region and impacts on the UK) project a large ensemble of the HadGEM3 coupled climate model is being run, CANARI-LE . This page is designed to provide details of the ensemble (below), information about the data and how to access, any events (e.g. March 2024 Sprint ), highlights and frequently asked questions .","title":"About"},{"location":"#ensemble-details","text":"Need to verify/look up these details and add references Model: HadGEM3-GC1.3-MM, same configuration as used in CMIP6, global configuration version 3.1 Ocean: NEMO3.6 Atmosphere: UM Sea Ice: CICE Land: Jules 40 historical (1950-2014) ensemble members 40 future projection, SSP3-7.0 (2015-2100) ensemble members","title":"Ensemble Details"},{"location":"#state-of-ensemble","text":"Currently running historical simulations, with approximately 25 ensemble members complete and 15 running. Detailed information on the state of the ensemble can be found here . An example set of data is currently uploaded onto and priority variables are in process of being downloaded from tape to JASMIN.","title":"State of Ensemble"},{"location":"#how-to-cite","text":"There is no specific paper yet on the large ensemble, so please reference the HadGEM3.1 paper and acknowledge CANARI and JASMIN.","title":"How to cite"},{"location":"#publications","text":"Soon :)","title":"Publications"},{"location":"FAQ/","text":"FAQ About the CANARI Sprint Definition Definition","title":"FAQ"},{"location":"FAQ/#faq","text":"About the CANARI Sprint","title":"FAQ"},{"location":"FAQ/#definition","text":"Definition","title":"Definition"},{"location":"about/","text":"About About the CANARI Sprint Definition Definition","title":"About"},{"location":"about/#about","text":"About the CANARI Sprint","title":"About"},{"location":"about/#definition","text":"Definition","title":"Definition"},{"location":"data/","text":"Data About the CANARI Sprint Definition Definition","title":"Data"},{"location":"data/#data","text":"About the CANARI Sprint","title":"Data"},{"location":"data/#definition","text":"Definition","title":"Definition"},{"location":"highlights/","text":"Highlights About the CANARI Sprint Definition Definition","title":"Highlights"},{"location":"highlights/#highlights","text":"About the CANARI Sprint","title":"Highlights"},{"location":"highlights/#definition","text":"Definition","title":"Definition"},{"location":"object_store/","text":"Object Store This document provides a description of the organization of the Pilot-imfe Tenancy on the Jasmin Object Store. The goal is to facilitate future applications of the same infrastructure in new digital twin or GIS systems projects. REQUIREMENTS For the assembly of an infrastructure for digital twin projects, some system requirements are necessary: - The bucket must have open access. A significant portion of the data will be made available to the public through the publication of the data's DOI. Therefore, it is important that the public can download most of the data without login issues or the need for registration. The bucket must have access control for some types of files. Depending on the data, the client may request that it has restricted access. The bucket must support versioning. Depending on the data format on the frontend, some libraries require that the bucket has version control. File Types The bucket must contain all CSV files, COG images, GeoTIFFs, PNGs, JPGs, as well as MBTILES, GEOJSON, SHP, and GEOPARQUET files. The bucket must include the structure and JSON of the STAC catalog. The bucket should contain all JSON files related to the catalogs and data of the STAC catalog. The bucket must contain the files used to populate the frontend. If the frontend requires images or JSON files to populate the site, they should be stored in the bucket. BUCKETS In order to meet all the requirements described above and at the same time align with the space and scalability needs of the project, the following bucket configuration was chosen: 1 bucket to store open access data without versioning control. 1 bucket to store data with access control. 1 bucket with versioning control. The three buckets will have the same data organization, which will facilitate interoperability between them. In other words, if a file needs to be accessed in the access-controlled bucket, the data path will be the same as if the file were in the open bucket. FILE SYSTEM The buckets have the following folder organization: \u251c\u2500\u2500 frontend \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u251c\u2500\u2500 image1.png \u2502 \u251c\u2500\u2500 layers.json \u2502 \u251c\u2500\u2500 layers3d.json \u2502 \u251c\u2500\u2500 website.json \u251c\u2500\u2500 STAC_Catalogue \u2502 \u251c\u2500\u2500 layer_type1 \u2502 \u2502 \u251c\u2500\u2500 layer1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 layer1.json \u2502 \u2502 \u251c\u2500\u2500 colection.json \u2502 \u251c\u2500\u2500 layer_type2 \u2502 \u251c\u2500\u2500 catalog.json \u251c\u2500\u2500 layers \u2502 \u251c\u2500\u2500 layer_type1 \u2502 \u2502 \u251c\u2500\u2500 layer1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 aditional directiories \u2502 \u2502 \u2502 \u251c\u2500\u2500 layer1.csv or .tif or .mbtiles or ... \u2502 \u2502 \u251c\u2500\u2500 layer2 \u2502 \u251c\u2500\u2500 layer_type2 \u2502 \u2502 \u251c\u2500\u2500 layer1 \u2502 \u2502 \u251c\u2500\u2500 layer2 \u2514\u2500\u2500","title":"Object Store"},{"location":"object_store/#object-store","text":"This document provides a description of the organization of the Pilot-imfe Tenancy on the Jasmin Object Store. The goal is to facilitate future applications of the same infrastructure in new digital twin or GIS systems projects.","title":"Object Store"},{"location":"object_store/#requirements","text":"For the assembly of an infrastructure for digital twin projects, some system requirements are necessary: - The bucket must have open access. A significant portion of the data will be made available to the public through the publication of the data's DOI. Therefore, it is important that the public can download most of the data without login issues or the need for registration. The bucket must have access control for some types of files. Depending on the data, the client may request that it has restricted access. The bucket must support versioning. Depending on the data format on the frontend, some libraries require that the bucket has version control. File Types The bucket must contain all CSV files, COG images, GeoTIFFs, PNGs, JPGs, as well as MBTILES, GEOJSON, SHP, and GEOPARQUET files. The bucket must include the structure and JSON of the STAC catalog. The bucket should contain all JSON files related to the catalogs and data of the STAC catalog. The bucket must contain the files used to populate the frontend. If the frontend requires images or JSON files to populate the site, they should be stored in the bucket.","title":"REQUIREMENTS"},{"location":"object_store/#buckets","text":"In order to meet all the requirements described above and at the same time align with the space and scalability needs of the project, the following bucket configuration was chosen: 1 bucket to store open access data without versioning control. 1 bucket to store data with access control. 1 bucket with versioning control. The three buckets will have the same data organization, which will facilitate interoperability between them. In other words, if a file needs to be accessed in the access-controlled bucket, the data path will be the same as if the file were in the open bucket.","title":"BUCKETS"},{"location":"object_store/#file-system","text":"The buckets have the following folder organization: \u251c\u2500\u2500 frontend \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u251c\u2500\u2500 image1.png \u2502 \u251c\u2500\u2500 layers.json \u2502 \u251c\u2500\u2500 layers3d.json \u2502 \u251c\u2500\u2500 website.json \u251c\u2500\u2500 STAC_Catalogue \u2502 \u251c\u2500\u2500 layer_type1 \u2502 \u2502 \u251c\u2500\u2500 layer1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 layer1.json \u2502 \u2502 \u251c\u2500\u2500 colection.json \u2502 \u251c\u2500\u2500 layer_type2 \u2502 \u251c\u2500\u2500 catalog.json \u251c\u2500\u2500 layers \u2502 \u251c\u2500\u2500 layer_type1 \u2502 \u2502 \u251c\u2500\u2500 layer1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 aditional directiories \u2502 \u2502 \u2502 \u251c\u2500\u2500 layer1.csv or .tif or .mbtiles or ... \u2502 \u2502 \u251c\u2500\u2500 layer2 \u2502 \u251c\u2500\u2500 layer_type2 \u2502 \u2502 \u251c\u2500\u2500 layer1 \u2502 \u2502 \u251c\u2500\u2500 layer2 \u2514\u2500\u2500","title":"FILE SYSTEM"},{"location":"sprint/","text":"Sprint March 2024 The sprint will take place March 4-8, 2024 About the CANARI Sprint Schedule Monday March 4, 2024 Definition","title":"Sprint March 2024"},{"location":"sprint/#sprint-march-2024","text":"The sprint will take place March 4-8, 2024 About the CANARI Sprint","title":"Sprint March 2024"},{"location":"sprint/#schedule","text":"Monday March 4, 2024 Definition","title":"Schedule"},{"location":"stac/","text":"STAC Catalog In order to manage a group of files within the object store, it is essential to create a catalog known as a STAC Catalog . The STAC specification provides a common language for describing geospatial information, making it easier to work with, index, and discover such data. You can access the STAC catalog for this project at this link . For detailed information on generating a STAC Catalog, please refer to the Data Pipelines repository . Creating STAC Catalogs To create STAC Catalogs for this project, you'll need to utilize the Data Pipelines Package . Follow these steps: Create a set of configuration files referred to as \"metadata.\" Metadata files include a primary JSON file representing the main catalog. Depending on the data group, if you wish to add sub-catalogs to your catalog, you can create auxiliary JSON files. The repository provides a list of example files. Import the function and create an instance of the class in Python: from create_stac.stac_gen import STACGen # Create an instance of the class and provide the path to your metadata files (JSON files) s = STACGen(metadata_path='../metadatas/') Generate the STAC Catalog: s.stac_gen(upload_bucket=True, stac_path='stac' ) Upon completion, a folder named \"stac\" will be created containing your STAC Catalog. Generating JSON for Web Applications When using STAC Catalogs in a frontend, importing all the individual files can be time-consuming. To expedite this process, a set of scripts has been created to convert the STAC into a single user-friendly JSON format that can be accepted by web applications. Currently, we are converting the STAC into a JSON format suitable for the \"Haig Fras Digital Twin\" project. To generate the JSON file, follow these steps: Import the function and create an instance of the class in Python: from create_stac.stac_convert import STACConvert c = STACConvert(bucket_path='', stac_path='stac') Generate the JSON file from the STAC Catalog: c.convert() Save the final JSON file and upload it to the object store: c.save_and upload(filename='layers.json') At this point, a file named \"layers.json\" will be created and ready for use by the web application. Set the following environment variables in your frontend project with information related to the path of your JSON file: \"VITE_LAYERS_JSON_URL\" and \"VITE_LAYERS3D_JSON_URL\".","title":"STAC Catalog"},{"location":"stac/#stac-catalog","text":"In order to manage a group of files within the object store, it is essential to create a catalog known as a STAC Catalog . The STAC specification provides a common language for describing geospatial information, making it easier to work with, index, and discover such data. You can access the STAC catalog for this project at this link . For detailed information on generating a STAC Catalog, please refer to the Data Pipelines repository .","title":"STAC Catalog"},{"location":"stac/#creating-stac-catalogs","text":"To create STAC Catalogs for this project, you'll need to utilize the Data Pipelines Package . Follow these steps: Create a set of configuration files referred to as \"metadata.\" Metadata files include a primary JSON file representing the main catalog. Depending on the data group, if you wish to add sub-catalogs to your catalog, you can create auxiliary JSON files. The repository provides a list of example files. Import the function and create an instance of the class in Python: from create_stac.stac_gen import STACGen # Create an instance of the class and provide the path to your metadata files (JSON files) s = STACGen(metadata_path='../metadatas/') Generate the STAC Catalog: s.stac_gen(upload_bucket=True, stac_path='stac' ) Upon completion, a folder named \"stac\" will be created containing your STAC Catalog.","title":"Creating STAC Catalogs"},{"location":"stac/#generating-json-for-web-applications","text":"When using STAC Catalogs in a frontend, importing all the individual files can be time-consuming. To expedite this process, a set of scripts has been created to convert the STAC into a single user-friendly JSON format that can be accepted by web applications. Currently, we are converting the STAC into a JSON format suitable for the \"Haig Fras Digital Twin\" project. To generate the JSON file, follow these steps: Import the function and create an instance of the class in Python: from create_stac.stac_convert import STACConvert c = STACConvert(bucket_path='', stac_path='stac') Generate the JSON file from the STAC Catalog: c.convert() Save the final JSON file and upload it to the object store: c.save_and upload(filename='layers.json') At this point, a file named \"layers.json\" will be created and ready for use by the web application. Set the following environment variables in your frontend project with information related to the path of your JSON file: \"VITE_LAYERS_JSON_URL\" and \"VITE_LAYERS3D_JSON_URL\".","title":"Generating JSON for Web Applications"}]}